// <auto-generated />
using System;
using ConsoleApp1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModernSlavery.Database;

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200212125015_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ConsoleApp1.AddressStatus", b =>
                {
                    b.Property<long>("AddressStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("AddressStatusId");

                    b.HasIndex("AddressId")
                        .HasName("IX_AddressId");

                    b.HasIndex("ByUserId")
                        .HasName("IX_ByUserId");

                    b.HasIndex("StatusDate")
                        .HasName("IX_StatusDate");

                    b.ToTable("AddressStatus");
                });

            modelBuilder.Entity("ConsoleApp1.AuditLogs", b =>
                {
                    b.Property<long>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ImpersonatedUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalUserId")
                        .HasColumnType("bigint");

                    b.HasKey("AuditLogId");

                    b.HasIndex("ImpersonatedUserId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("OriginalUserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ConsoleApp1.Feedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActionsToCloseGpg")
                        .HasColumnType("bit");

                    b.Property<bool?>("Charity")
                        .HasColumnType("bit");

                    b.Property<bool?>("CloseOrganisationGpg")
                        .HasColumnType("bit");

                    b.Property<bool?>("CompanyIntranet")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmployeeInterestedInOrganisationData")
                        .HasColumnType("bit");

                    b.Property<bool?>("EmployerUnion")
                        .HasColumnType("bit");

                    b.Property<bool?>("FindOutAboutGpg")
                        .HasColumnType("bit");

                    b.Property<bool?>("InternetSearch")
                        .HasColumnType("bit");

                    b.Property<bool?>("LobbyGroup")
                        .HasColumnType("bit");

                    b.Property<bool?>("ManagerInvolvedInGpgReport")
                        .HasColumnType("bit");

                    b.Property<bool?>("NewsArticle")
                        .HasColumnType("bit");

                    b.Property<bool?>("OtherPerson")
                        .HasColumnType("bit");

                    b.Property<string>("OtherPersonText")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("OtherReason")
                        .HasColumnType("bit");

                    b.Property<string>("OtherReasonText")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("OtherSource")
                        .HasColumnType("bit");

                    b.Property<string>("OtherSourceText")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<bool?>("PersonInterestedInGeneralGpg")
                        .HasColumnType("bit");

                    b.Property<bool?>("PersonInterestedInSpecificOrganisationGpg")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Report")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReportOrganisationGpgData")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResponsibleForReportingGpg")
                        .HasColumnType("bit");

                    b.Property<bool?>("SocialMedia")
                        .HasColumnType("bit");

                    b.Property<bool?>("ViewSpecificOrganisationGpg")
                        .HasColumnType("bit");

                    b.HasKey("FeedbackId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationAddresses", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsUkAddress")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("PoBox")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<string>("TownCity")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("AddressId")
                        .HasName("PK_dbo.OrganisationAddresses");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("StatusDate")
                        .HasName("IX_StatusDate");

                    b.HasIndex("StatusId")
                        .HasName("IX_StatusId");

                    b.ToTable("OrganisationAddresses");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationNames", b =>
                {
                    b.Property<long>("OrganisationNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationNameId")
                        .HasName("PK_dbo.OrganisationNames");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("Name")
                        .HasName("IX_Name");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.ToTable("OrganisationNames");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationPublicSectorTypes", b =>
                {
                    b.Property<long>("OrganisationPublicSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<int>("PublicSectorTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Retired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationPublicSectorTypeId")
                        .HasName("PK_dbo.OrganisationPublicSectorTypes");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("PublicSectorTypeId")
                        .HasName("IX_PublicSectorTypeId");

                    b.HasIndex("Retired")
                        .HasName("IX_Retired");

                    b.ToTable("OrganisationPublicSectorTypes");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationReferences", b =>
                {
                    b.Property<long>("OrganisationReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ReferenceValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("OrganisationReferenceId")
                        .HasName("PK_dbo.OrganisationReferences");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("ReferenceName")
                        .HasName("IX_ReferenceName");

                    b.HasIndex("ReferenceValue")
                        .HasName("IX_ReferenceValue");

                    b.ToTable("OrganisationReferences");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationScopes", b =>
                {
                    b.Property<long>("OrganisationScopeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CampaignId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmailAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactFirstname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactLastname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ReadGuidance")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("RegisterStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisterStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScopeStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScopeStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SnapshotDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('1900-01-01T00:00:00.000')");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("OrganisationScopeId")
                        .HasName("PK_dbo.OrganisationScopes");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("RegisterStatusId")
                        .HasName("IX_RegisterStatusId");

                    b.HasIndex("ScopeStatusDate")
                        .HasName("IX_ScopeStatusDate");

                    b.HasIndex("ScopeStatusId")
                        .HasName("IX_ScopeStatusId");

                    b.HasIndex("SnapshotDate")
                        .HasName("IX_SnapshotDate");

                    b.HasIndex("StatusId")
                        .HasName("IX_StatusId");

                    b.ToTable("OrganisationScopes");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationSicCodes", b =>
                {
                    b.Property<long>("OrganisationSicCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Retired")
                        .HasColumnType("datetime2");

                    b.Property<int>("SicCodeId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("OrganisationSicCodeId")
                        .HasName("PK_dbo.OrganisationSicCodes");

                    b.HasIndex("Created")
                        .HasName("IX_Created");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("Retired")
                        .HasName("IX_Retired");

                    b.HasIndex("SicCodeId")
                        .HasName("IX_SicCodeId");

                    b.ToTable("OrganisationSicCodes");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationStatus", b =>
                {
                    b.Property<long>("OrganisationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("OrganisationStatusId");

                    b.HasIndex("ByUserId")
                        .HasName("IX_ByUserId");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("StatusDate")
                        .HasName("IX_StatusDate");

                    b.ToTable("OrganisationStatus");
                });

            modelBuilder.Entity("ConsoleApp1.Organisations", b =>
                {
                    b.Property<long>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfCessation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dunsnumber")
                        .HasColumnName("DUNSNumber")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("EmployerReference")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastCheckedAgainstCompaniesHouse")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LatestAddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LatestPublicSectorTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LatestRegistrationOrganisationId")
                        .HasColumnName("LatestRegistration_OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LatestRegistrationUserId")
                        .HasColumnName("LatestRegistration_UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LatestReturnId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LatestScopeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("OptedOutFromCompaniesHouseUpdate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SectorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SecurityCodeCreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SecurityCodeExpiryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("OrganisationId")
                        .HasName("PK_dbo.Organisations");

                    b.HasIndex("CompanyNumber")
                        .IsUnique()
                        .HasName("idx_Organisations_CompanyNumber")
                        .HasFilter("([CompanyNumber] IS NOT NULL)");

                    b.HasIndex("Dunsnumber")
                        .IsUnique()
                        .HasName("idx_Organisations_DUNSNumber")
                        .HasFilter("([DUNSNumber] IS NOT NULL)");

                    b.HasIndex("EmployerReference")
                        .IsUnique()
                        .HasName("idx_Organisations_EmployerReference")
                        .HasFilter("([EmployerReference] IS NOT NULL)");

                    b.HasIndex("LatestAddressId")
                        .HasName("IX_LatestAddressId");

                    b.HasIndex("LatestPublicSectorTypeId")
                        .HasName("IX_LatestPublicSectorTypeId");

                    b.HasIndex("LatestReturnId")
                        .HasName("IX_LatestReturnId");

                    b.HasIndex("LatestScopeId")
                        .HasName("IX_LatestScopeId");

                    b.HasIndex("OrganisationName")
                        .HasName("IX_OrganisationName");

                    b.HasIndex("SectorTypeId")
                        .HasName("IX_SectorTypeId");

                    b.HasIndex("StatusId")
                        .HasName("IX_StatusId");

                    b.HasIndex("LatestRegistrationUserId", "LatestRegistrationOrganisationId")
                        .HasName("IX_LatestRegistration_UserId_LatestRegistration_OrganisationId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("ConsoleApp1.PublicSectorTypes", b =>
                {
                    b.Property<int>("PublicSectorTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("PublicSectorTypeId")
                        .HasName("PK_dbo.PublicSectorTypes");

                    b.ToTable("PublicSectorTypes");
                });

            modelBuilder.Entity("ConsoleApp1.ReminderEmails", b =>
                {
                    b.Property<long>("ReminderEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectorType")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ReminderEmailId");

                    b.ToTable("ReminderEmails");
                });

            modelBuilder.Entity("ConsoleApp1.ReturnStatus", b =>
                {
                    b.Property<long>("ReturnStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReturnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("ReturnStatusId");

                    b.HasIndex("ByUserId")
                        .HasName("IX_ByUserId");

                    b.HasIndex("ReturnId")
                        .HasName("IX_ReturnId");

                    b.HasIndex("StatusDate")
                        .HasName("IX_StatusDate");

                    b.ToTable("ReturnStatus");
                });

            modelBuilder.Entity("ConsoleApp1.Returns", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AccountingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyLinkToGpginfo")
                        .HasColumnName("CompanyLinkToGPGInfo")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DiffMeanBonusPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiffMeanHourlyPayPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("DiffMedianBonusPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiffMedianHourlyPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("Ehrcresponse")
                        .HasColumnName("EHRCResponse")
                        .HasColumnType("bit");

                    b.Property<decimal>("FemaleLowerPayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FemaleMedianBonusPayPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FemaleMiddlePayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FemaleUpperPayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("FemaleUpperQuartilePayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsLateSubmission")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LateReason")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("MaleLowerPayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MaleMedianBonusPayPercent")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MaleMiddlePayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MaleUpperPayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MaleUpperQuartilePayBand")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("MaxEmployees")
                        .HasColumnType("int");

                    b.Property<int>("MinEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Modifications")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.HasKey("ReturnId")
                        .HasName("PK_dbo.Returns");

                    b.HasIndex("AccountingDate")
                        .HasName("IX_AccountingDate");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("StatusId")
                        .HasName("IX_StatusId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("ConsoleApp1.SicCodes", b =>
                {
                    b.Property<int>("SicCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("SicSectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.HasKey("SicCodeId")
                        .HasName("PK_dbo.SicCodes");

                    b.HasIndex("SicSectionId")
                        .HasName("IX_SicSectionId");

                    b.ToTable("SicCodes");
                });

            modelBuilder.Entity("ConsoleApp1.SicSections", b =>
                {
                    b.Property<string>("SicSectionId")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("SicSectionId")
                        .HasName("PK_dbo.SicSections");

                    b.ToTable("SicSections");
                });

            modelBuilder.Entity("ConsoleApp1.UserOrganisations", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganisationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ConfirmAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConfirmAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("MethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pin")
                        .HasColumnName("PIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PinconfirmedDate")
                        .HasColumnName("PINConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pinhash")
                        .HasColumnName("PINHash")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("PinsentDate")
                        .HasColumnName("PINSentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PitpnotifyLetterId")
                        .HasColumnName("PITPNotifyLetterId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "OrganisationId")
                        .HasName("PK_dbo.UserOrganisations");

                    b.HasIndex("AddressId")
                        .HasName("IX_AddressId");

                    b.HasIndex("OrganisationId")
                        .HasName("IX_OrganisationId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserOrganisations");
                });

            modelBuilder.Entity("ConsoleApp1.UserSettings", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Key")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("UserId", "Key")
                        .HasName("PK_dbo.UserSettings");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ConsoleApp1.UserStatus", b =>
                {
                    b.Property<long>("UserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserStatusId");

                    b.HasIndex("ByUserId")
                        .HasName("IX_ByUserId");

                    b.HasIndex("StatusDate")
                        .HasName("IX_StatusDate");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("UserStatus");
                });

            modelBuilder.Entity("ConsoleApp1.Users", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmailAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactJobTitle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactLastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ContactOrganisation")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactPhoneNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("EmailVerifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailVerifyHash")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("EmailVerifySendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("HashingAlgorithm")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("ResetAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResetSendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDetails")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("VerifyAttemptDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VerifyAttempts")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_dbo.Users");

                    b.HasIndex("ContactEmailAddress")
                        .HasName("IX_ContactEmailAddress");

                    b.HasIndex("ContactPhoneNumber")
                        .HasName("IX_ContactPhoneNumber");

                    b.HasIndex("EmailAddress")
                        .HasName("IX_EmailAddress");

                    b.HasIndex("StatusId")
                        .HasName("IX_StatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConsoleApp1.AddressStatus", b =>
                {
                    b.HasOne("ConsoleApp1.OrganisationAddresses", "Address")
                        .WithMany("AddressStatus")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_dbo.AddressStatus_dbo.OrganisationAddresses_AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Users", "ByUser")
                        .WithMany("AddressStatus")
                        .HasForeignKey("ByUserId")
                        .HasConstraintName("FK_dbo.AddressStatus_dbo.Users_ByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.AuditLogs", b =>
                {
                    b.HasOne("ConsoleApp1.Users", "ImpersonatedUser")
                        .WithMany("AuditLogsImpersonatedUser")
                        .HasForeignKey("ImpersonatedUserId");

                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("AuditLogs")
                        .HasForeignKey("OrganisationId");

                    b.HasOne("ConsoleApp1.Users", "OriginalUser")
                        .WithMany("AuditLogsOriginalUser")
                        .HasForeignKey("OriginalUserId");
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationAddresses", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationAddresses")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationAddresses_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationNames", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationNames")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationNames_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationPublicSectorTypes", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationPublicSectorTypes")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationPublicSectorTypes_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.PublicSectorTypes", "PublicSectorType")
                        .WithMany("OrganisationPublicSectorTypes")
                        .HasForeignKey("PublicSectorTypeId")
                        .HasConstraintName("FK_dbo.OrganisationPublicSectorTypes_dbo.PublicSectorTypes_PublicSectorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationReferences", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationReferences")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationReferences_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationScopes", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationScopes")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationScopes_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationSicCodes", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationSicCodes")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationSicCodes_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.SicCodes", "SicCode")
                        .WithMany("OrganisationSicCodes")
                        .HasForeignKey("SicCodeId")
                        .HasConstraintName("FK_dbo.OrganisationSicCodes_dbo.SicCodes_SicCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.OrganisationStatus", b =>
                {
                    b.HasOne("ConsoleApp1.Users", "ByUser")
                        .WithMany("OrganisationStatus")
                        .HasForeignKey("ByUserId")
                        .HasConstraintName("FK_dbo.OrganisationStatus_dbo.Users_ByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("OrganisationStatus")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.OrganisationStatus_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.Organisations", b =>
                {
                    b.HasOne("ConsoleApp1.OrganisationAddresses", "LatestAddress")
                        .WithMany("Organisations")
                        .HasForeignKey("LatestAddressId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.OrganisationAddresses_LatestAddressId");

                    b.HasOne("ConsoleApp1.OrganisationPublicSectorTypes", "LatestPublicSectorType")
                        .WithMany("Organisations")
                        .HasForeignKey("LatestPublicSectorTypeId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.OrganisationPublicSectorTypes_LatestPublicSectorTypeId");

                    b.HasOne("ConsoleApp1.Returns", "LatestReturn")
                        .WithMany("Organisations")
                        .HasForeignKey("LatestReturnId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.Returns_LatestReturnId");

                    b.HasOne("ConsoleApp1.OrganisationScopes", "LatestScope")
                        .WithMany("Organisations")
                        .HasForeignKey("LatestScopeId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.OrganisationScopes_LatestScopeId");

                    b.HasOne("ConsoleApp1.UserOrganisations", "LatestRegistration")
                        .WithMany("Organisations")
                        .HasForeignKey("LatestRegistrationUserId", "LatestRegistrationOrganisationId")
                        .HasConstraintName("FK_dbo.Organisations_dbo.UserOrganisations_LatestRegistration_UserId_LatestRegistration_OrganisationId");
                });

            modelBuilder.Entity("ConsoleApp1.ReturnStatus", b =>
                {
                    b.HasOne("ConsoleApp1.Users", "ByUser")
                        .WithMany("ReturnStatus")
                        .HasForeignKey("ByUserId")
                        .HasConstraintName("FK_dbo.ReturnStatus_dbo.Users_ByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Returns", "Return")
                        .WithMany("ReturnStatus")
                        .HasForeignKey("ReturnId")
                        .HasConstraintName("FK_dbo.ReturnStatus_dbo.Returns_ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.Returns", b =>
                {
                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("Returns")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.Returns_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.SicCodes", b =>
                {
                    b.HasOne("ConsoleApp1.SicSections", "SicSection")
                        .WithMany("SicCodes")
                        .HasForeignKey("SicSectionId")
                        .HasConstraintName("FK_dbo.SicCodes_dbo.SicSections_SicSectionId")
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.UserOrganisations", b =>
                {
                    b.HasOne("ConsoleApp1.OrganisationAddresses", "Address")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.OrganisationAddresses_AddressId");

                    b.HasOne("ConsoleApp1.Organisations", "Organisation")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("OrganisationId")
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.Organisations_OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Users", "User")
                        .WithMany("UserOrganisations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserOrganisations_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.UserSettings", b =>
                {
                    b.HasOne("ConsoleApp1.Users", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserSettings_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConsoleApp1.UserStatus", b =>
                {
                    b.HasOne("ConsoleApp1.Users", "ByUser")
                        .WithMany("UserStatusByUser")
                        .HasForeignKey("ByUserId")
                        .HasConstraintName("FK_dbo.UserStatus_dbo.Users_ByUserId")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Users", "User")
                        .WithMany("UserStatusUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.UserStatus_dbo.Users_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

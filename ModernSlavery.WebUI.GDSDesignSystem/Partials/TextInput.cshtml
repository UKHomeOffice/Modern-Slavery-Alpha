@model TextInputViewModel

<div class="govuk-form-group @(Model.FormGroup?.Classes) @(Model.ErrorMessage != null ? "govuk-form-group--error" : "")">
    @{
        var describedBy = Model.DescribedBy;
        if (Model.Label != null)
        {
            await Html.RenderPartialAsync("~/Partials/Label.cshtml", Model.Label);
        }
        if (Model.Hint != null)
        {
            Model.Hint.Id = $"{Model.Id}-hint";
            describedBy += Model.Hint.Id;
            await Html.RenderPartialAsync("~/Partials/Hint.cshtml", Model.Hint);
        }
        if (Model.ErrorMessage != null)
        {
            Model.ErrorMessage.Id = $"{Model.Id}-error";
            describedBy += Model.ErrorMessage.Id;
            await Html.RenderPartialAsync("~/Partials/ErrorMessage.cshtml", Model.ErrorMessage);
        }
    }
    <input class="govuk-input @(Model.Classes) @(Model.ErrorMessage != null ? "govuk-input--error" : "")"
           id="@(Model.Id)"
           name="@(Model.Name)"
           type="@(Model.Type ?? "text")"
           value="@(Model.Value)"
           aria-describedby="@(describedBy)"
           autocomplete="@(Model.Autocomplete)"
           pattern="@(Model.Pattern)"
           inputmode="@(Model.InputMode)"
           @(Html.Raw(Model.Attributes != null ? string.Join(" ", Model.Attributes.Select(a => a.Key + "=\"" + a.Value + "\"")) : ""))/>

    @if (Model.TextInputAppendix != null)
    {
        await Html.RenderPartialAsync("~/Partials/HtmlText.cshtml", Model.TextInputAppendix);
    }
</div>